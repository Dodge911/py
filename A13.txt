import mysql.connector
import configparser
from mysql.connector import IntegrityError

# Load configuration from config.ini
config = configparser.ConfigParser()
config.read('config.ini')

# Retrieve MySQL configuration without database
db_config = {
    'host': config['mysql']['host'],
    'user': config['mysql']['user'],
    'password': config['mysql']['password']
}

# Connect to MySQL without specifying the database
db = mysql.connector.connect(**db_config)
cursor = db.cursor()

# Function to create the database if it doesn't exist
def create_database(database_name):
    cursor.execute(f"CREATE DATABASE IF NOT EXISTS {database_name}")
    cursor.execute(f"USE {database_name}")

# Specify the database name
database_name = "db2"
create_database(database_name)

# Create tables with foreign key constraints
def create_tables():
    cursor.execute("""
    CREATE TABLE IF NOT EXISTS Department (
        dept_id INT PRIMARY KEY,
        dept_name VARCHAR(50),
        location VARCHAR(50)
    )
    """)

    cursor.execute("""
    CREATE TABLE IF NOT EXISTS Employee (
        empid INT PRIMARY KEY,
        empname VARCHAR(50),
        dept_id INT,
        salary DECIMAL(10, 2),
        FOREIGN KEY (dept_id) REFERENCES Department(dept_id) ON DELETE CASCADE
    )
    """)

# Call table creation function
create_tables()

# Function for inserting data
def insert_data():
    table = input("Enter table name (Department/Employee): ").strip().lower()
    try:
        if table == 'department':
            dept_id = int(input("Enter Department ID: "))
            dept_name = input("Enter Department Name: ")
            location = input("Enter Location: ")

            cursor.execute(
                "INSERT INTO Department (dept_id, dept_name, location) VALUES (%s, %s, %s)",
                (dept_id, dept_name, location)
            )
            db.commit()
            print("Department record inserted successfully!")

        elif table == 'employee':
            empid = int(input("Enter Employee ID: "))
            empname = input("Enter Employee Name: ")
            dept_id = int(input("Enter Department ID: "))
            salary = float(input("Enter Salary: "))

            cursor.execute(
                "INSERT INTO Employee (empid, empname, dept_id, salary) VALUES (%s, %s, %s, %s)",
                (empid, empname, dept_id, salary)
            )
            db.commit()
            print("Employee record inserted successfully!")
        else:
            print("Invalid table name.")
    except IntegrityError as e:
        if "1062" in str(e):  # Error code for duplicate entry
            print(f"Error: Duplicate entry. Please use a unique ID.")
        else:
            print(f"An error occurred: {e}")

# Function for deleting data
def delete_data():
    table = input("Enter table name (Department/Employee): ").strip().lower()
    if table == 'department':
        dept_id = int(input("Enter Department ID to delete: "))
        cursor.execute("DELETE FROM Employee WHERE dept_id = %s", (dept_id,))
        cursor.execute("DELETE FROM Department WHERE dept_id = %s", (dept_id,))
        db.commit()
        print(f"Department ID {dept_id} and its employees deleted successfully!")

    elif table == 'employee':
        empid = int(input("Enter Employee ID to delete: "))
        cursor.execute("DELETE FROM Employee WHERE empid = %s", (empid,))
        db.commit()
        print(f"Employee ID {empid} deleted successfully!")
    else:
        print("Invalid table name.")

# Function for updating data
def update_data():
    table = input("Enter table name (Department/Employee): ").strip().lower()
    if table == 'department':
        dept_id = int(input("Enter Department ID to update: "))
        new_name = input("Enter new Department Name: ")
        new_location = input("Enter new Location: ")

        cursor.execute(
            "UPDATE Department SET dept_name = %s, location = %s WHERE dept_id = %s",
            (new_name, new_location, dept_id)
        )
        db.commit()
        print(f"Department ID {dept_id} updated successfully!")

    elif table == 'employee':
        empid = int(input("Enter Employee ID to update: "))
        new_name = input("Enter new Employee Name: ")
        new_salary = float(input("Enter new Salary: "))

        cursor.execute(
            "UPDATE Employee SET empname = %s, salary = %s WHERE empid = %s",
            (new_name, new_salary, empid)
        )
        db.commit()
        print(f"Employee ID {empid} updated successfully!")
    else:
        print("Invalid table name.")

# Function for selecting data
def select_data():
    table = input("Enter table name (Department/Employee): ").strip().lower()
    if table == 'department':
        cursor.execute("SELECT * FROM Department")
        rows = cursor.fetchall()
        if rows:
            for row in rows:
                print(row)
        else:
            print("No data found in Department.")
    elif table == 'employee':
        cursor.execute("SELECT * FROM Employee")
        rows = cursor.fetchall()
        if rows:
            for row in rows:
                print(row)
        else:
            print("No data found in Employee.")
    else:
        print("Invalid table name.")

# Function for generating reports

# Function for generating reports
def generate_reports():
    print("Select a report type:")
    print("1. Employees with Salary Above a Limit")
    print("2. Employee Count in Each Department")
    
    report_type = input("Enter your choice (1/2): ").strip()
    
    if report_type == '1':
        # Report 1: Employees with Salary Above a Limit
        salary_limit = input("Enter the salary limit (e.g., 50000): ").strip()
        
        try:
            salary_limit = float(salary_limit)
            cursor.execute("SELECT empname, salary FROM Employee WHERE salary > %s", (salary_limit,))
            results = cursor.fetchall()
            
            if results:
                print(f"\nEmployees with salary above {salary_limit}:")
                for row in results:
                    print(f"Employee: {row[0]}, Salary: {row[1]}")
            else:
                print(f"No employees found with salary above {salary_limit}.")
        except ValueError:
            print("Invalid salary input. Please enter a valid number.")

    elif report_type == '2':
        # Report 2: Employee Count in Each Department
        print("\nGenerating report for employee count in each department...")
        cursor.execute("""
        SELECT d.dept_name, COUNT(e.empid) AS num_employees
        FROM Department d
        LEFT JOIN Employee e ON d.dept_id = e.dept_id
        GROUP BY d.dept_name
        """)
        results = cursor.fetchall()

        if results:
            print("\nEmployee count in each department:")
            for row in results:
                print(f"Department: {row[0]}, Number of Employees: {row[1]}")
        else:
            print("No departments found.")
    
    else:
        print("Invalid input. Please choose either 1 or 2.")



# Menu-driven interface
def menu():
    while True:
        print("\nMenu:")
        print("1. Select")
        print("2. Insert")
        print("3. Delete")
        print("4. Update")
        print("5. Reports")
        print("6. Exit")
        
        choice = input("Enter your choice: ").strip()
        if choice == '1':
            select_data()
        elif choice == '2':
            insert_data()
        elif choice == '3':
            delete_data()
        elif choice == '4':
            update_data()
        elif choice == '5':
            generate_reports()
        elif choice == '6':
            print("Exiting...")
            break
        else:
            print("Invalid choice. Please try again.")

# Run the menu
menu()

# Close the connection
cursor.close()
db.close()
